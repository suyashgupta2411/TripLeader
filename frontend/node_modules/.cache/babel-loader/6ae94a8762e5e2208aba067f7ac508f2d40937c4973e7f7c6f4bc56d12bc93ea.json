{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.htmlToDOM = exports.domToReact = exports.attributesToProps = exports.Text = exports.ProcessingInstruction = exports.Element = exports.Comment = void 0;\nvar html_dom_parser_1 = __importDefault(require(\"html-dom-parser\"));\nexports.htmlToDOM = html_dom_parser_1.default;\nvar attributes_to_props_1 = __importDefault(require(\"./attributes-to-props\"));\nexports.attributesToProps = attributes_to_props_1.default;\nvar dom_to_react_1 = __importDefault(require(\"./dom-to-react\"));\nexports.domToReact = dom_to_react_1.default;\nvar domhandler_1 = require(\"domhandler\");\nObject.defineProperty(exports, \"Comment\", {\n  enumerable: true,\n  get: function () {\n    return domhandler_1.Comment;\n  }\n});\nObject.defineProperty(exports, \"Element\", {\n  enumerable: true,\n  get: function () {\n    return domhandler_1.Element;\n  }\n});\nObject.defineProperty(exports, \"ProcessingInstruction\", {\n  enumerable: true,\n  get: function () {\n    return domhandler_1.ProcessingInstruction;\n  }\n});\nObject.defineProperty(exports, \"Text\", {\n  enumerable: true,\n  get: function () {\n    return domhandler_1.Text;\n  }\n});\nvar domParserOptions = {\n  lowerCaseAttributeNames: false\n};\n/**\n * Converts HTML string to React elements.\n *\n * @param html - HTML string.\n * @param options - Parser options.\n * @returns - React element(s), empty array, or string.\n */\nfunction HTMLReactParser(html, options) {\n  if (typeof html !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n  if (!html) {\n    return [];\n  }\n  return (0, dom_to_react_1.default)((0, html_dom_parser_1.default)(html, (options === null || options === void 0 ? void 0 : options.htmlparser2) || domParserOptions), options);\n}\nexports.default = HTMLReactParser;","map":{"version":3,"mappings":";;;;;;;;;;;AAAA;AAUwCA,oBAVjCC,yBAAS;AAEhB;AAQSD,4BARFE,6BAAiB;AACxB;AAO4BF,qBAPrBG,sBAAU;AAGjB;AAASC;EAAAC;EAAAC;IAAA,2BAAO;EAAA;AAAA;AAAEF;EAAAC;EAAAC;IAAA,2BAAO;EAAA;AAAA;AAAEF;EAAAC;EAAAC;IAAA,yCAAqB;EAAA;AAAA;AAAEF;EAAAC;EAAAC;IAAA,wBAAI;EAAA;AAAA;AAMtD,IAAMC,gBAAgB,GAAG;EAAEC,uBAAuB,EAAE;AAAK,CAAW;AAEpE;;;;;;;AAOA,SAAwBC,eAAe,CACrCC,IAAY,EACZC,OAAgC;EAEhC,IAAI,OAAOD,IAAI,KAAK,QAAQ,EAAE;IAC5B,MAAM,IAAIE,SAAS,CAAC,iCAAiC,CAAC;EACxD;EAEA,IAAI,CAACF,IAAI,EAAE;IACT,OAAO,EAAE;EACX;EAEA,OAAO,0BAAU,EACf,6BAAS,EAACA,IAAI,EAAE,QAAO,aAAPC,OAAO,uBAAPA,OAAO,CAAEE,WAAW,KAAIN,gBAAgB,CAAC,EACzDI,OAAO,CACR;AACH;AAhBAX","names":["exports","html_dom_parser_1","attributes_to_props_1","dom_to_react_1","Object","enumerable","get","domParserOptions","lowerCaseAttributeNames","HTMLReactParser","html","options","TypeError","htmlparser2"],"sources":["/Users/suyashgupta/Downloads/tour-management-mid-eval/frontend/node_modules/html-react-parser/src/index.ts"],"sourcesContent":["import htmlToDOM from 'html-dom-parser';\n\nimport attributesToProps from './attributes-to-props';\nimport domToReact from './dom-to-react';\nimport type { HTMLReactParserOptions } from './types';\n\nexport { Comment, Element, ProcessingInstruction, Text } from 'domhandler';\nexport type { DOMNode } from 'html-dom-parser';\n\nexport type { HTMLReactParserOptions };\nexport { attributesToProps, domToReact, htmlToDOM };\n\nconst domParserOptions = { lowerCaseAttributeNames: false } as const;\n\n/**\n * Converts HTML string to React elements.\n *\n * @param html - HTML string.\n * @param options - Parser options.\n * @returns - React element(s), empty array, or string.\n */\nexport default function HTMLReactParser(\n  html: string,\n  options?: HTMLReactParserOptions,\n): ReturnType<typeof domToReact> {\n  if (typeof html !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!html) {\n    return [];\n  }\n\n  return domToReact(\n    htmlToDOM(html, options?.htmlparser2 || domParserOptions),\n    options,\n  );\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}