{"ast":null,"code":"var _jsxFileName = \"/Users/suyashgupta/Downloads/tour-management-mid-eval/frontend/src/pages/Chatbot.jsx\",\n  _s = $RefreshSig$();\n// Chatbot.jsx\n\nimport React, { useState } from \"react\";\nimport SearchBar from \"../shared/SearchBar\";\nimport \"../styles/chatbot.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [generatedContent, setGeneratedContent] = useState(\"\");\n  const handleContentUpdate = content => {\n    // Check if content exists and has parts array\n    if (content && content.parts && content.parts.length > 0) {\n      // Access the text section of the content\n      const text = content.parts[0].text;\n      // Access the photo URL if available\n      const photoUrl = content.photoUrl || \"\";\n      // Update the state with the text and photo URL\n      setGeneratedContent({\n        text,\n        photoUrl\n      });\n    } else {\n      // If content is empty or does not have parts array\n      setGeneratedContent(\"No content found\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Gemini API Content Generator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n      onContentUpdate: handleContentUpdate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"generated-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Generated Content:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: generatedContent.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), generatedContent.photoUrl && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: generatedContent.photoUrl,\n        alt: \"Generated Content\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"Y0OBIxlJx+sEJtejBomAILttq9s=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","SearchBar","Chatbot","generatedContent","setGeneratedContent","handleContentUpdate","content","parts","length","text","photoUrl"],"sources":["/Users/suyashgupta/Downloads/tour-management-mid-eval/frontend/src/pages/Chatbot.jsx"],"sourcesContent":["// Chatbot.jsx\n\nimport React, { useState } from \"react\";\nimport SearchBar from \"../shared/SearchBar\";\nimport \"../styles/chatbot.css\";\n\nconst Chatbot = () => {\n  const [generatedContent, setGeneratedContent] = useState(\"\");\n\n  const handleContentUpdate = (content) => {\n    // Check if content exists and has parts array\n    if (content && content.parts && content.parts.length > 0) {\n      // Access the text section of the content\n      const text = content.parts[0].text;\n      // Access the photo URL if available\n      const photoUrl = content.photoUrl || \"\";\n      // Update the state with the text and photo URL\n      setGeneratedContent({ text, photoUrl });\n    } else {\n      // If content is empty or does not have parts array\n      setGeneratedContent(\"No content found\");\n    }\n  };\n\n  return (\n    <div className=\"chatbot\">\n      <h1>Gemini API Content Generator</h1>\n      <SearchBar onContentUpdate={handleContentUpdate} />\n      <div className=\"generated-content\">\n        <h2>Generated Content:</h2>\n        {/* Render text */}\n        <p>{generatedContent.text}</p>\n        {/* Render photo if available */}\n        {generatedContent.photoUrl && (\n          <img src={generatedContent.photoUrl} alt=\"Generated Content\" />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Chatbot;\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,SAAS,MAAM,qBAAqB;AAC3C,OAAO,uBAAuB;AAAC;AAE/B,MAAMC,OAAO,GAAG,MAAM;EAAA;EACpB,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EAE5D,MAAMK,mBAAmB,GAAIC,OAAO,IAAK;IACvC;IACA,IAAIA,OAAO,IAAIA,OAAO,CAACC,KAAK,IAAID,OAAO,CAACC,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;MACxD;MACA,MAAMC,IAAI,GAAGH,OAAO,CAACC,KAAK,CAAC,CAAC,CAAC,CAACE,IAAI;MAClC;MACA,MAAMC,QAAQ,GAAGJ,OAAO,CAACI,QAAQ,IAAI,EAAE;MACvC;MACAN,mBAAmB,CAAC;QAAEK,IAAI;QAAEC;MAAS,CAAC,CAAC;IACzC,CAAC,MAAM;MACL;MACAN,mBAAmB,CAAC,kBAAkB,CAAC;IACzC;EACF,CAAC;EAED,oBACE;IAAK,SAAS,EAAC,SAAS;IAAA,wBACtB;MAAA,UAAI;IAA4B;MAAA;MAAA;MAAA;IAAA,QAAK,eACrC,QAAC,SAAS;MAAC,eAAe,EAAEC;IAAoB;MAAA;MAAA;MAAA;IAAA,QAAG,eACnD;MAAK,SAAS,EAAC,mBAAmB;MAAA,wBAChC;QAAA,UAAI;MAAkB;QAAA;QAAA;QAAA;MAAA,QAAK,eAE3B;QAAA,UAAIF,gBAAgB,CAACM;MAAI;QAAA;QAAA;QAAA;MAAA,QAAK,EAE7BN,gBAAgB,CAACO,QAAQ,iBACxB;QAAK,GAAG,EAAEP,gBAAgB,CAACO,QAAS;QAAC,GAAG,EAAC;MAAmB;QAAA;QAAA;QAAA;MAAA,QAC7D;IAAA;MAAA;MAAA;MAAA;IAAA,QACG;EAAA;IAAA;IAAA;IAAA;EAAA,QACF;AAEV,CAAC;AAAC,GAjCIR,OAAO;AAAA,KAAPA,OAAO;AAmCb,eAAeA,OAAO;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}