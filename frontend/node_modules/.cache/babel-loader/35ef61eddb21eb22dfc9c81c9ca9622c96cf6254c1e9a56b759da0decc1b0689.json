{"ast":null,"code":"var _jsxFileName = \"/Users/suyashgupta/Downloads/tour-management-mid-eval/frontend/src/pages/Chatbot.jsx\",\n  _s = $RefreshSig$();\n// Chatbot.jsx\n\nimport React, { useState } from \"react\";\nimport SearchBar from \"../shared/SearchBar\";\nimport \"../styles/chatbot.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [generatedContent, setGeneratedContent] = useState(\"\");\n  const handleContentUpdate = content => {\n    // Check if content exists and has parts array\n    if (content && content.parts && content.parts.length > 0) {\n      // Access the text section of the content\n      const text = preprocessContent(content.parts[0].text);\n      // Update the state with the text\n      setGeneratedContent(text);\n    } else {\n      // If content is empty or does not have parts array\n      setGeneratedContent(\"No content found\");\n    }\n  };\n\n  // Function to preprocess the content\n  const preprocessContent = text => {\n    // Split the text by '**' to identify bold sections\n    const boldSections = text.split(\"**\");\n\n    // Process each section\n    const processedText = boldSections.map((section, index) => {\n      // Apply bold formatting to odd-indexed sections (i.e., enclosed within '**')\n      if (index % 2 === 1) {\n        return /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: section\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 16\n        }, this);\n      } else {\n        // Add line breaks after every full stop\n        const lines = section.split(\". \");\n        return lines.map((line, idx) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [line, \".\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 20\n          }, this)]\n        }, idx, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this));\n      }\n    });\n\n    // Concatenate processed sections and return\n    return processedText;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Gemini API Content Generator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n      onContentUpdate: handleContentUpdate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"generated-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Generated Content:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), generatedContent]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"Y0OBIxlJx+sEJtejBomAILttq9s=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","SearchBar","Chatbot","generatedContent","setGeneratedContent","handleContentUpdate","content","parts","length","text","preprocessContent","boldSections","split","processedText","map","section","index","lines","line","idx"],"sources":["/Users/suyashgupta/Downloads/tour-management-mid-eval/frontend/src/pages/Chatbot.jsx"],"sourcesContent":["// Chatbot.jsx\n\nimport React, { useState } from \"react\";\nimport SearchBar from \"../shared/SearchBar\";\nimport \"../styles/chatbot.css\";\n\nconst Chatbot = () => {\n  const [generatedContent, setGeneratedContent] = useState(\"\");\n\n  const handleContentUpdate = (content) => {\n    // Check if content exists and has parts array\n    if (content && content.parts && content.parts.length > 0) {\n      // Access the text section of the content\n      const text = preprocessContent(content.parts[0].text);\n      // Update the state with the text\n      setGeneratedContent(text);\n    } else {\n      // If content is empty or does not have parts array\n      setGeneratedContent(\"No content found\");\n    }\n  };\n\n  // Function to preprocess the content\n  const preprocessContent = (text) => {\n    // Split the text by '**' to identify bold sections\n    const boldSections = text.split(\"**\");\n\n    // Process each section\n    const processedText = boldSections.map((section, index) => {\n      // Apply bold formatting to odd-indexed sections (i.e., enclosed within '**')\n      if (index % 2 === 1) {\n        return <strong key={index}>{section}</strong>;\n      } else {\n        // Add line breaks after every full stop\n        const lines = section.split(\". \");\n        return lines.map((line, idx) => (\n          <React.Fragment key={idx}>\n            {line}.<br />\n          </React.Fragment>\n        ));\n      }\n    });\n\n    // Concatenate processed sections and return\n    return processedText;\n  };\n\n  return (\n    <div className=\"chatbot\">\n      <h1>Gemini API Content Generator</h1>\n      <SearchBar onContentUpdate={handleContentUpdate} />\n      <div className=\"generated-content\">\n        <h2>Generated Content:</h2>\n        {/* Render processed content */}\n        {generatedContent}\n      </div>\n    </div>\n  );\n};\n\nexport default Chatbot;\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,SAAS,MAAM,qBAAqB;AAC3C,OAAO,uBAAuB;AAAC;AAE/B,MAAMC,OAAO,GAAG,MAAM;EAAA;EACpB,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EAE5D,MAAMK,mBAAmB,GAAIC,OAAO,IAAK;IACvC;IACA,IAAIA,OAAO,IAAIA,OAAO,CAACC,KAAK,IAAID,OAAO,CAACC,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;MACxD;MACA,MAAMC,IAAI,GAAGC,iBAAiB,CAACJ,OAAO,CAACC,KAAK,CAAC,CAAC,CAAC,CAACE,IAAI,CAAC;MACrD;MACAL,mBAAmB,CAACK,IAAI,CAAC;IAC3B,CAAC,MAAM;MACL;MACAL,mBAAmB,CAAC,kBAAkB,CAAC;IACzC;EACF,CAAC;;EAED;EACA,MAAMM,iBAAiB,GAAID,IAAI,IAAK;IAClC;IACA,MAAME,YAAY,GAAGF,IAAI,CAACG,KAAK,CAAC,IAAI,CAAC;;IAErC;IACA,MAAMC,aAAa,GAAGF,YAAY,CAACG,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,KAAK;MACzD;MACA,IAAIA,KAAK,GAAG,CAAC,KAAK,CAAC,EAAE;QACnB,oBAAO;UAAA,UAAqBD;QAAO,GAAfC,KAAK;UAAA;UAAA;UAAA;QAAA,QAAoB;MAC/C,CAAC,MAAM;QACL;QACA,MAAMC,KAAK,GAAGF,OAAO,CAACH,KAAK,CAAC,IAAI,CAAC;QACjC,OAAOK,KAAK,CAACH,GAAG,CAAC,CAACI,IAAI,EAAEC,GAAG,kBACzB,QAAC,KAAK,CAAC,QAAQ;UAAA,WACZD,IAAI,EAAC,GAAC;YAAA;YAAA;YAAA;UAAA,QAAM;QAAA,GADMC,GAAG;UAAA;UAAA;UAAA;QAAA,QAGzB,CAAC;MACJ;IACF,CAAC,CAAC;;IAEF;IACA,OAAON,aAAa;EACtB,CAAC;EAED,oBACE;IAAK,SAAS,EAAC,SAAS;IAAA,wBACtB;MAAA,UAAI;IAA4B;MAAA;MAAA;MAAA;IAAA,QAAK,eACrC,QAAC,SAAS;MAAC,eAAe,EAAER;IAAoB;MAAA;MAAA;MAAA;IAAA,QAAG,eACnD;MAAK,SAAS,EAAC,mBAAmB;MAAA,wBAChC;QAAA,UAAI;MAAkB;QAAA;QAAA;QAAA;MAAA,QAAK,EAE1BF,gBAAgB;IAAA;MAAA;MAAA;MAAA;IAAA,QACb;EAAA;IAAA;IAAA;IAAA;EAAA,QACF;AAEV,CAAC;AAAC,GApDID,OAAO;AAAA,KAAPA,OAAO;AAsDb,eAAeA,OAAO;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}